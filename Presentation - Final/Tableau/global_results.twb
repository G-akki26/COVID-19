<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20202.20.0525.1210                               -->
<workbook original-version='18.1' source-build='2020.2.1 (20202.20.0525.1210)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <_.fcp.SetMembershipControl.true...SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='global_results' path='/workbooks' revision='1.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='All+ (Global_input_output)' inline='true' name='federated.066in9g1e8wm4f17eihpb11b5uvc' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Global_input_output' name='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98'>
            <connection class='excel-direct' cleaning='yes' compat='no' dataRefreshTime='' filename='C:/Users/Akki/Downloads/Major Project Final/Global_input_output.xlsx' interpretationMode='1' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='All' table='[All$]' type='table'>
          <columns gridOrigin='A1:E10001:no:A1:E10001:1' header='yes' lost='0' outcome='1' processed='29997'>
            <column datatype='date' name='Date' ordinal='0' />
            <column datatype='string' name='Country_Province' ordinal='1' />
            <column datatype='integer' name='ConfirmedCases' ordinal='2' />
            <column datatype='integer' name='Fatalities' ordinal='3' />
            <column datatype='string' name='Type' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='All' table='[All$]' type='table'>
            <columns gridOrigin='A1:E10001:no:A1:E10001:1' header='yes' lost='0' outcome='1' processed='29997'>
              <column datatype='date' name='Date' ordinal='0' />
              <column datatype='string' name='Country_Province' ordinal='1' />
              <column datatype='integer' name='ConfirmedCases' ordinal='2' />
              <column datatype='integer' name='Fatalities' ordinal='3' />
              <column datatype='string' name='Type' ordinal='4' />
            </columns>
          </relation>
          <relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='CC_MAPE' table='[CC_MAPE$]' type='table'>
            <columns gridOrigin='A1:F314:no:A1:F314:1' header='yes' lost='0' outcome='1' processed='1562'>
              <column datatype='string' name='Region' ordinal='0' />
              <column datatype='real' name='SARIMA' ordinal='1' />
              <column datatype='real' name='TES' ordinal='2' />
              <column datatype='real' name='LR' ordinal='3' />
              <column datatype='real' name='LightGBM' ordinal='4' />
              <column datatype='real' name='Prophet' ordinal='5' />
            </columns>
          </relation>
          <relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='F_MAPE' table='[F_MAPE$]' type='table'>
            <columns gridOrigin='A1:F268:no:A1:F268:1' header='yes' lost='0' outcome='1' processed='1316'>
              <column datatype='string' name='Region' ordinal='0' />
              <column datatype='real' name='SARIMA' ordinal='1' />
              <column datatype='real' name='TES' ordinal='2' />
              <column datatype='real' name='LR' ordinal='3' />
              <column datatype='real' name='LightGBM' ordinal='4' />
              <column datatype='real' name='Prophet' ordinal='5' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[ConfirmedCases]' value='[All].[ConfirmedCases]' />
          <map key='[Country_Province]' value='[All].[Country_Province]' />
          <map key='[Date]' value='[All].[Date]' />
          <map key='[Fatalities]' value='[All].[Fatalities]' />
          <map key='[LR (F!MAPE)]' value='[F_MAPE].[LR]' />
          <map key='[LR]' value='[CC_MAPE].[LR]' />
          <map key='[LightGBM (F!MAPE)]' value='[F_MAPE].[LightGBM]' />
          <map key='[LightGBM]' value='[CC_MAPE].[LightGBM]' />
          <map key='[Prophet (F!MAPE)]' value='[F_MAPE].[Prophet]' />
          <map key='[Prophet]' value='[CC_MAPE].[Prophet]' />
          <map key='[Region (F!MAPE)]' value='[F_MAPE].[Region]' />
          <map key='[Region]' value='[CC_MAPE].[Region]' />
          <map key='[SARIMA (F!MAPE)]' value='[F_MAPE].[SARIMA]' />
          <map key='[SARIMA]' value='[CC_MAPE].[SARIMA]' />
          <map key='[TES (F!MAPE)]' value='[F_MAPE].[TES]' />
          <map key='[TES]' value='[CC_MAPE].[TES]' />
          <map key='[Type]' value='[All].[Type]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[All]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E10001:no:A1:E10001:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>29997</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:F314:no:A1:F314:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>1562</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:F268:no:A1:F268:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>1316</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[All]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country_Province</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country_Province]</local-name>
            <parent-name>[All]</parent-name>
            <remote-alias>Country_Province</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ConfirmedCases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ConfirmedCases]</local-name>
            <parent-name>[All]</parent-name>
            <remote-alias>ConfirmedCases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fatalities</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Fatalities]</local-name>
            <parent-name>[All]</parent-name>
            <remote-alias>Fatalities</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Type]</local-name>
            <parent-name>[All]</parent-name>
            <remote-alias>Type</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SARIMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SARIMA]</local-name>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias>SARIMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TES</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TES]</local-name>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias>TES</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LR</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LR]</local-name>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias>LR</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LightGBM</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LightGBM]</local-name>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias>LightGBM</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prophet</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Prophet]</local-name>
            <parent-name>[CC_MAPE]</parent-name>
            <remote-alias>Prophet</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region (F!MAPE)]</local-name>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SARIMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SARIMA (F!MAPE)]</local-name>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias>SARIMA</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TES</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TES (F!MAPE)]</local-name>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias>TES</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LR</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LR (F!MAPE)]</local-name>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias>LR</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LightGBM</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LightGBM (F!MAPE)]</local-name>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias>LightGBM</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prophet</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Prophet (F!MAPE)]</local-name>
            <parent-name>[F_MAPE]</parent-name>
            <remote-alias>Prophet</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
          <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
          <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
          <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
          <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
          <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
          <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
          <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
          <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
          <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
          <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
          <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
          <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
          <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
          <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
          <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
          <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
          <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
          <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
          <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
          <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
        </semantic-values>
      </column>
      <column datatype='real' name='[LR (F!MAPE)]' role='measure' type='quantitative' />
      <column datatype='real' name='[LR]' role='measure' type='quantitative' />
      <column datatype='real' name='[LightGBM (F!MAPE)]' role='measure' type='quantitative' />
      <column datatype='real' name='[LightGBM]' role='measure' type='quantitative' />
      <column aggregation='CountD' datatype='real' name='[Prophet (F!MAPE)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Prophet]' role='measure' type='quantitative' />
      <column datatype='real' name='[SARIMA (F!MAPE)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SARIMA]' role='measure' type='quantitative' />
      <column datatype='real' name='[TES (F!MAPE)]' role='measure' type='quantitative' />
      <column datatype='real' name='[TES]' role='measure' type='quantitative' />
      <column datatype='string' name='[Type]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='All' datatype='table' name='[__tableau_internal_object_id__].[All_6299E8326CE04D61AB7916F81451C156]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='CC_MAPE' datatype='table' name='[__tableau_internal_object_id__].[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='F_MAPE' datatype='table' name='[__tableau_internal_object_id__].[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]' role='measure' type='quantitative' />
      <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
      <column-instance column='[LR (F!MAPE)]' derivation='Sum' name='[sum:LR (F!MAPE):qk]' pivot='key' type='quantitative' />
      <column-instance column='[LR]' derivation='Sum' name='[sum:LR:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LightGBM (F!MAPE)]' derivation='Sum' name='[sum:LightGBM (F!MAPE):qk]' pivot='key' type='quantitative' />
      <column-instance column='[LightGBM]' derivation='Sum' name='[sum:LightGBM:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Prophet (F!MAPE)]' derivation='Sum' name='[sum:Prophet (F!MAPE):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Prophet]' derivation='Sum' name='[sum:Prophet:qk]' pivot='key' type='quantitative' />
      <column-instance column='[SARIMA (F!MAPE)]' derivation='Sum' name='[sum:SARIMA (F!MAPE):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SARIMA]' derivation='Sum' name='[sum:SARIMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TES (F!MAPE)]' derivation='Sum' name='[sum:TES (F!MAPE):qk]' pivot='key' type='quantitative' />
      <column-instance column='[TES]' derivation='Sum' name='[sum:TES:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Country_Province)' hidden='true' name='[Action (Country_Province)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country_Province]' />
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_GB' class='hyper' dbname='C:/Users/Akki/Documents/My Tableau Repository/Datasources/All+ (Global_input_output).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='07/02/2020 03:32:38 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='All_6299E8326CE04D61AB7916F81451C156' table='[Extract].[All_6299E8326CE04D61AB7916F81451C156]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
            <relation name='All_6299E8326CE04D61AB7916F81451C156' table='[Extract].[All_6299E8326CE04D61AB7916F81451C156]' type='table' />
            <relation name='CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5' table='[Extract].[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]' type='table' />
            <relation name='F!MAPE_03BE9224BA474B77BC6FDA711DA568DB' table='[Extract].[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]' type='table' />
          </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
          <cols>
            <map key='[ConfirmedCases]' value='[All_6299E8326CE04D61AB7916F81451C156].[ConfirmedCases]' />
            <map key='[Country_Province]' value='[All_6299E8326CE04D61AB7916F81451C156].[Country_Province]' />
            <map key='[Date]' value='[All_6299E8326CE04D61AB7916F81451C156].[Date]' />
            <map key='[Fatalities]' value='[All_6299E8326CE04D61AB7916F81451C156].[Fatalities]' />
            <map key='[LR (F!MAPE)]' value='[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB].[LR]' />
            <map key='[LR]' value='[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5].[LR]' />
            <map key='[LightGBM (F!MAPE)]' value='[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB].[LightGBM]' />
            <map key='[LightGBM]' value='[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5].[LightGBM]' />
            <map key='[Prophet (F!MAPE)]' value='[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB].[Prophet]' />
            <map key='[Prophet]' value='[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5].[Prophet]' />
            <map key='[Region (F!MAPE)]' value='[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB].[Region]' />
            <map key='[Region]' value='[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5].[Region]' />
            <map key='[SARIMA (F!MAPE)]' value='[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB].[SARIMA]' />
            <map key='[SARIMA]' value='[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5].[SARIMA]' />
            <map key='[TES (F!MAPE)]' value='[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB].[TES]' />
            <map key='[TES]' value='[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5].[TES]' />
            <map key='[Type]' value='[All_6299E8326CE04D61AB7916F81451C156].[Type]' />
          </cols>
          <refresh>
            <refresh-event add-from-file-path='All+ (Global_input_output)' increment-value='%null%' refresh-type='create' rows-inserted='95419' timestamp-start='2020-07-02 15:32:38.608' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Date]</local-name>
              <parent-name>[All_6299E8326CE04D61AB7916F81451C156]</parent-name>
              <remote-alias>Date</remote-alias>
              <ordinal>0</ordinal>
              <family>All</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>191</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country_Province</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country_Province]</local-name>
              <parent-name>[All_6299E8326CE04D61AB7916F81451C156]</parent-name>
              <remote-alias>Country_Province</remote-alias>
              <ordinal>1</ordinal>
              <family>All</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>596</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>ConfirmedCases</remote-name>
              <remote-type>20</remote-type>
              <local-name>[ConfirmedCases]</local-name>
              <parent-name>[All_6299E8326CE04D61AB7916F81451C156]</parent-name>
              <remote-alias>ConfirmedCases</remote-alias>
              <ordinal>2</ordinal>
              <family>All</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>7811</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Fatalities</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Fatalities]</local-name>
              <parent-name>[All_6299E8326CE04D61AB7916F81451C156]</parent-name>
              <remote-alias>Fatalities</remote-alias>
              <ordinal>3</ordinal>
              <family>All</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1953</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Type]</local-name>
              <parent-name>[All_6299E8326CE04D61AB7916F81451C156]</parent-name>
              <remote-alias>Type</remote-alias>
              <ordinal>4</ordinal>
              <family>All</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[All_6299E8326CE04D61AB7916F81451C156]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Region</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Region]</local-name>
              <parent-name>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</parent-name>
              <remote-alias>Region</remote-alias>
              <ordinal>5</ordinal>
              <family>CC_MAPE</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>313</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>SARIMA</remote-name>
              <remote-type>5</remote-type>
              <local-name>[SARIMA]</local-name>
              <parent-name>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</parent-name>
              <remote-alias>SARIMA</remote-alias>
              <ordinal>6</ordinal>
              <family>CC_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>279</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TES</remote-name>
              <remote-type>5</remote-type>
              <local-name>[TES]</local-name>
              <parent-name>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</parent-name>
              <remote-alias>TES</remote-alias>
              <ordinal>7</ordinal>
              <family>CC_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>286</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LR</remote-name>
              <remote-type>5</remote-type>
              <local-name>[LR]</local-name>
              <parent-name>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</parent-name>
              <remote-alias>LR</remote-alias>
              <ordinal>8</ordinal>
              <family>CC_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>272</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LightGBM</remote-name>
              <remote-type>5</remote-type>
              <local-name>[LightGBM]</local-name>
              <parent-name>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</parent-name>
              <remote-alias>LightGBM</remote-alias>
              <ordinal>9</ordinal>
              <family>CC_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>277</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Prophet</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Prophet]</local-name>
              <parent-name>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</parent-name>
              <remote-alias>Prophet</remote-alias>
              <ordinal>10</ordinal>
              <family>CC_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>307</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Region</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Region (F!MAPE)]</local-name>
              <parent-name>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</parent-name>
              <remote-alias>Region</remote-alias>
              <ordinal>11</ordinal>
              <family>F_MAPE</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>267</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>SARIMA</remote-name>
              <remote-type>5</remote-type>
              <local-name>[SARIMA (F!MAPE)]</local-name>
              <parent-name>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</parent-name>
              <remote-alias>SARIMA</remote-alias>
              <ordinal>12</ordinal>
              <family>F_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>213</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TES</remote-name>
              <remote-type>5</remote-type>
              <local-name>[TES (F!MAPE)]</local-name>
              <parent-name>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</parent-name>
              <remote-alias>TES</remote-alias>
              <ordinal>13</ordinal>
              <family>F_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>222</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LR</remote-name>
              <remote-type>5</remote-type>
              <local-name>[LR (F!MAPE)]</local-name>
              <parent-name>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</parent-name>
              <remote-alias>LR</remote-alias>
              <ordinal>14</ordinal>
              <family>F_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>211</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LightGBM</remote-name>
              <remote-type>5</remote-type>
              <local-name>[LightGBM (F!MAPE)]</local-name>
              <parent-name>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</parent-name>
              <remote-alias>LightGBM</remote-alias>
              <ordinal>15</ordinal>
              <family>F_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>211</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Prophet</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Prophet (F!MAPE)]</local-name>
              <parent-name>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</parent-name>
              <remote-alias>Prophet</remote-alias>
              <ordinal>16</ordinal>
              <family>F_MAPE</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>210</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LR:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:TES:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:SARIMA:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Prophet (F!MAPE):qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LightGBM (F!MAPE):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:TES (F!MAPE):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Prophet:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LR (F!MAPE):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LightGBM:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:SARIMA (F!MAPE):qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Type:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Input&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SARIMA&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Prophet&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;LR&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;TES&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;LightGBM&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='All' id='All_6299E8326CE04D61AB7916F81451C156'>
            <properties context=''>
              <relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='All' table='[All$]' type='table'>
                <columns gridOrigin='A1:E10001:no:A1:E10001:1' header='yes' lost='0' outcome='1' processed='29997'>
                  <column datatype='date' name='Date' ordinal='0' />
                  <column datatype='string' name='Country_Province' ordinal='1' />
                  <column datatype='integer' name='ConfirmedCases' ordinal='2' />
                  <column datatype='integer' name='Fatalities' ordinal='3' />
                  <column datatype='string' name='Type' ordinal='4' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='All_6299E8326CE04D61AB7916F81451C156' table='[Extract].[All_6299E8326CE04D61AB7916F81451C156]' type='table' />
            </properties>
          </object>
          <object caption='CC_MAPE' id='CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5'>
            <properties context=''>
              <relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='CC_MAPE' table='[CC_MAPE$]' type='table'>
                <columns gridOrigin='A1:F314:no:A1:F314:1' header='yes' lost='0' outcome='1' processed='1562'>
                  <column datatype='string' name='Region' ordinal='0' />
                  <column datatype='real' name='SARIMA' ordinal='1' />
                  <column datatype='real' name='TES' ordinal='2' />
                  <column datatype='real' name='LR' ordinal='3' />
                  <column datatype='real' name='LightGBM' ordinal='4' />
                  <column datatype='real' name='Prophet' ordinal='5' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5' table='[Extract].[CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5]' type='table' />
            </properties>
          </object>
          <object caption='F_MAPE' id='F!MAPE_03BE9224BA474B77BC6FDA711DA568DB'>
            <properties context=''>
              <relation connection='excel-direct.0u8dcdl09zbx2s0zte8pm04a0s98' name='F_MAPE' table='[F_MAPE$]' type='table'>
                <columns gridOrigin='A1:F268:no:A1:F268:1' header='yes' lost='0' outcome='1' processed='1316'>
                  <column datatype='string' name='Region' ordinal='0' />
                  <column datatype='real' name='SARIMA' ordinal='1' />
                  <column datatype='real' name='TES' ordinal='2' />
                  <column datatype='real' name='LR' ordinal='3' />
                  <column datatype='real' name='LightGBM' ordinal='4' />
                  <column datatype='real' name='Prophet' ordinal='5' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='F!MAPE_03BE9224BA474B77BC6FDA711DA568DB' table='[Extract].[F!MAPE_03BE9224BA474B77BC6FDA711DA568DB]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Country_Province]' />
              <expression op='[Region]' />
            </expression>
            <first-end-point object-id='All_6299E8326CE04D61AB7916F81451C156' />
            <second-end-point object-id='CC!MAPE_61147B9CCB724F8CBAD5AA8B481964F5' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country_Province]' />
              <expression op='[Region (F!MAPE)]' />
            </expression>
            <first-end-point object-id='All_6299E8326CE04D61AB7916F81451C156' />
            <second-end-point object-id='F!MAPE_03BE9224BA474B77BC6FDA711DA568DB' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Regions of World' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter1' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Regions of World' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 2' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Confirmed Cases Forecasting'>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='integer' name='[ConfirmedCases]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Type]' role='dimension' type='nominal' />
            <column-instance column='[Country_Province]' derivation='None' name='[none:Country_Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[ConfirmedCases]' derivation='Sum' name='[sum:ConfirmedCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]'>
            <groupfilter function='level-members' level='[Country_Province]' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]'>
            <groupfilter function='level-members' level='[none:Country_Province:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]</column>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:ConfirmedCases:qk]</rows>
        <cols>[federated.066in9g1e8wm4f17eihpb11b5uvc].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{27E4AE87-F1A9-4A0A-BF11-11D7BE8BBD55}' />
    </worksheet>
    <worksheet name='Confirmed Cases Input'>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='integer' name='[ConfirmedCases]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Type]' role='dimension' type='nominal' />
            <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[ConfirmedCases]' derivation='Sum' name='[sum:ConfirmedCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]'>
            <groupfilter function='level-members' level='[Country_Province]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]'>
            <groupfilter function='member' level='[none:Type:nk]' member='&quot;Input&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</column>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:ConfirmedCases:qk]</rows>
        <cols>[federated.066in9g1e8wm4f17eihpb11b5uvc].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{04C32A8D-19CC-4220-B143-F457D2974BD9}' />
    </worksheet>
    <worksheet name='Fatalities Forecasting'>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Fatalities]' role='measure' type='quantitative' />
            <column datatype='string' name='[Type]' role='dimension' type='nominal' />
            <column-instance column='[Country_Province]' derivation='None' name='[none:Country_Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Fatalities]' derivation='Sum' name='[sum:Fatalities:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]'>
            <groupfilter function='level-members' level='[Country_Province]' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]'>
            <groupfilter function='level-members' level='[none:Country_Province:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]</column>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Fatalities:qk]</rows>
        <cols>[federated.066in9g1e8wm4f17eihpb11b5uvc].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{6AFCF4B5-955D-45D1-B833-11D63633A89E}' />
    </worksheet>
    <worksheet name='Fatalities Input'>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Fatalities]' role='measure' type='quantitative' />
            <column datatype='string' name='[Type]' role='dimension' type='nominal' />
            <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Fatalities]' derivation='Sum' name='[sum:Fatalities:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]'>
            <groupfilter function='level-members' level='[Country_Province]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]'>
            <groupfilter function='member' level='[none:Type:nk]' member='&quot;Input&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</column>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#f28e2b' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Fatalities:qk]</rows>
        <cols>[federated.066in9g1e8wm4f17eihpb11b5uvc].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{F7F036E7-69A8-491D-92D4-40172CDC978E}' />
    </worksheet>
    <worksheet name='Performance - CC'>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[LR]' role='measure' type='quantitative' />
            <column datatype='real' name='[LightGBM]' role='measure' type='quantitative' />
            <column datatype='real' name='[Prophet]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='real' name='[SARIMA]' role='measure' type='quantitative' />
            <column datatype='real' name='[TES]' role='measure' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[LR]' derivation='Sum' name='[sum:LR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LightGBM]' derivation='Sum' name='[sum:LightGBM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Prophet]' derivation='Sum' name='[sum:Prophet:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SARIMA]' derivation='Sum' name='[sum:SARIMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TES]' derivation='Sum' name='[sum:TES:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LightGBM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Prophet:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:SARIMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:TES:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]'>
            <groupfilter function='level-members' level='[Country_Province]' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]</column>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Multiple Values]' scope='rows' value='Mean Absolute Percentage Error (MAPE)' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Multiple Values]</rows>
        <cols>([federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Region:nk] / [federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{13E822F0-4228-4035-AB55-2C09B3D00147}' />
    </worksheet>
    <worksheet name='Performance - F'>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[LR (F!MAPE)]' role='measure' type='quantitative' />
            <column datatype='real' name='[LightGBM (F!MAPE)]' role='measure' type='quantitative' />
            <column aggregation='CountD' datatype='real' name='[Prophet (F!MAPE)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region (F!MAPE)]' role='dimension' type='nominal' />
            <column datatype='real' name='[SARIMA (F!MAPE)]' role='measure' type='quantitative' />
            <column datatype='real' name='[TES (F!MAPE)]' role='measure' type='quantitative' />
            <column-instance column='[Region (F!MAPE)]' derivation='None' name='[none:Region (F!MAPE):nk]' pivot='key' type='nominal' />
            <column-instance column='[LR (F!MAPE)]' derivation='Sum' name='[sum:LR (F!MAPE):qk]' pivot='key' type='quantitative' />
            <column-instance column='[LightGBM (F!MAPE)]' derivation='Sum' name='[sum:LightGBM (F!MAPE):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Prophet (F!MAPE)]' derivation='Sum' name='[sum:Prophet (F!MAPE):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SARIMA (F!MAPE)]' derivation='Sum' name='[sum:SARIMA (F!MAPE):qk]' pivot='key' type='quantitative' />
            <column-instance column='[TES (F!MAPE)]' derivation='Sum' name='[sum:TES (F!MAPE):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LR (F!MAPE):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LightGBM (F!MAPE):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Prophet (F!MAPE):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:SARIMA (F!MAPE):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:TES (F!MAPE):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LR (F!MAPE):qk]&quot;</bucket>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:LightGBM (F!MAPE):qk]&quot;</bucket>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:Prophet (F!MAPE):qk]&quot;</bucket>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:SARIMA (F!MAPE):qk]&quot;</bucket>
              <bucket>&quot;[federated.066in9g1e8wm4f17eihpb11b5uvc].[sum:TES (F!MAPE):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]'>
            <groupfilter function='level-members' level='[Country_Province]' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]</column>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Action (Country_Province)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Multiple Values]' scope='rows' value='Mean Absolute Percentage Error (MAPE)' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Multiple Values]</rows>
        <cols>([federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Region (F!MAPE):nk] / [federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{F3113376-EE00-43C0-AEDC-4FD57847EE9D}' />
    </worksheet>
    <worksheet name='Regions of World'>
      <layout-options>
        <title>
          <formatted-text>
            <run><![CDATA[<Sheet Name> and their situation as on April 19, 2020]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='All+ (Global_input_output)' name='federated.066in9g1e8wm4f17eihpb11b5uvc' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.066in9g1e8wm4f17eihpb11b5uvc'>
            <column datatype='integer' name='[ConfirmedCases]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country_Province]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Alabama, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alaska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Alberta, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Anguilla, United Kingdom&quot;' value='&quot;Anguilla&quot;' />
                <semantic-value key='&quot;Anhui, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Arizona, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Arkansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Australian Capital Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Beijing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bermuda, United Kingdom&quot;' value='&quot;Bermuda&quot;' />
                <semantic-value key='&quot;Bonaire, Sint Eustatius and Saba, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;British Virgin Islands, United Kingdom&quot;' value='&quot;British Virgin Islands&quot;' />
                <semantic-value key='&quot;California, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Cayman Islands, United Kingdom&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;Channel Islands, United Kingdom&quot;' value='&quot;United Kingdom&quot;' />
                <semantic-value key='&quot;Chongqing, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Colorado, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Connecticut, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Curacao, Netherlands&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;Delaware, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;District of Columbia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Falkland Islands (Malvinas), United Kingdom&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Faroe Islands, Denmark&quot;' value='&quot;Faroe&quot;' />
                <semantic-value key='&quot;Florida, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Fujian, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Gibraltar, United Kingdom&quot;' value='&quot;Gibraltar&quot;' />
                <semantic-value key='&quot;Greenland, Denmark&quot;' value='&quot;Greenland&quot;' />
                <semantic-value key='&quot;Guangdong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Guizhou, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hainan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hawaii, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Hebei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Heilongjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Henan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hubei, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Hunan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Idaho, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Illinois, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Indiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Inner Mongolia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Iowa, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Isle of Man, United Kingdom&quot;' value='&quot;Isle of Man&quot;' />
                <semantic-value key='&quot;Jiangsu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jiangxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Jilin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Kansas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Kentucky, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Liaoning, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Louisiana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Macau, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Maine, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Manitoba, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Maryland, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Massachusetts, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mayotte, France&quot;' value='&quot;Mayotte&quot;' />
                <semantic-value key='&quot;Michigan, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Minnesota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Mississippi, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Missouri, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montana, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Montserrat, United Kingdom&quot;' value='&quot;Montserrat&quot;' />
                <semantic-value key='&quot;Nebraska, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Nevada, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Brunswick, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;New Hampshire, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Jersey, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New Mexico, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;New South Wales, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;New York, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Newfoundland and Labrador, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ningxia, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;North Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;North Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Northern Territory, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Northwest Territories, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Nova Scotia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Ohio, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Oklahoma, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Ontario, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Oregon, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Pennsylvania, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Prince Edward Island, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Quebec, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Queensland, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Rhode Island, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Saint Barthelemy, France&quot;' value='&quot;Saint Barthelemy&quot;' />
                <semantic-value key='&quot;Saint Pierre and Miquelon, France&quot;' value='&quot;Saint Pierre and Miquelon&quot;' />
                <semantic-value key='&quot;Saskatchewan, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Shaanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shandong, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Shanxi, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sint Maarten, Netherlands&quot;' value='&quot;Sint Maarten (Dutch part)&quot;' />
                <semantic-value key='&quot;South Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;South Carolina, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;South Dakota, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;St Martin, France&quot;' value='&quot;Saint Martin&quot;' />
                <semantic-value key='&quot;Tasmania, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Tennessee, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Texas, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Tianjin, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tibet, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Turks and Caicos Islands, United Kingdom&quot;' value='&quot;Turks and Caicos&quot;' />
                <semantic-value key='&quot;Utah, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Vermont, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Victoria, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Washington, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;West Virginia, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Western Australia, Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;Wisconsin, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Wyoming, US&quot;' value='&quot;USA&quot;' />
                <semantic-value key='&quot;Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Yukon, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Zhejiang, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Fatalities]' role='measure' type='quantitative' />
            <column-instance column='[ConfirmedCases]' derivation='Max' name='[max:ConfirmedCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fatalities]' derivation='Max' name='[max:Fatalities:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country_Province]' derivation='None' name='[none:Country_Province:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country_Province:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country_Province:nk]' member='&quot;Ghana&quot;' />
                <groupfilter function='member' level='[none:Country_Province:nk]' member='&quot;Maldives&quot;' />
                <groupfilter function='member' level='[none:Country_Province:nk]' member='&quot;Sierra Leone&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Longitude (generated)]' field-type='quantitative' max='24661303.413958605' min='-18819527.89512397' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.066in9g1e8wm4f17eihpb11b5uvc].[Latitude (generated)]' field-type='quantitative' max='14213094.366565868' min='-10838435.837839307' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:Fatalities:qk]' num-steps='13' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:Fatalities:qk]' />
              <lod column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]' />
              <size column='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:ConfirmedCases:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='4' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='2' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Latitude (generated)]</rows>
        <cols>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{7B540D32-E4AE-4B64-B0E8-A675D18AF491}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='4' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='67500' id='7' param='horz' w='98400' x='800' y='1000'>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='67500' id='5' w='85600' x='800' y='1000'>
              <zone h='67500' id='3' name='Regions of World' w='85600' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' fixed-size='128' h='67500' id='6' is-fixed='true' param='vert' w='12800' x='86400' y='1000'>
              <zone _.fcp.SetMembershipControl.false...type='size' _.fcp.SetMembershipControl.true...type-v2='size' h='13250' id='8' name='Regions of World' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:ConfirmedCases:qk]' w='12800' x='86400' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='8125' id='9' name='Regions of World' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:Fatalities:qk]' w='12800' x='86400' y='14250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone h='30500' id='10' name='Confirmed Cases Input' w='49200' x='800' y='68500'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='30500' id='11' name='Fatalities Input' w='49200' x='50000' y='68500'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='950' minheight='950' sizing-mode='vscroll' />
          <zones>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='21' w='100000' x='0' y='0'>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='20' param='vert' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='67500' id='3' is-fixed='true' name='Regions of World' w='85600' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='size' _.fcp.SetMembershipControl.true...type-v2='size' h='13250' id='8' name='Regions of World' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:ConfirmedCases:qk]' w='12800' x='86400' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='8125' id='9' name='Regions of World' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:Fatalities:qk]' w='12800' x='86400' y='14250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='236' h='30500' id='10' is-fixed='true' name='Confirmed Cases Input' w='49200' x='800' y='68500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='236' h='30500' id='11' is-fixed='true' name='Fatalities Input' w='49200' x='50000' y='68500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{E228C940-3245-4C67-870A-B56BF6AF8DB5}' />
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='4' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='7' param='horz' w='98400' x='800' y='1000'>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='98000' id='5' w='82400' x='800' y='1000'>
              <zone h='49000' id='3' name='Confirmed Cases Forecasting' w='53200' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='Fatalities Forecasting' w='53200' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='10' name='Performance - CC' w='29200' x='54000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='12' name='Performance - F' w='29200' x='54000' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' fixed-size='160' h='98000' id='6' is-fixed='true' param='vert' w='16000' x='83200' y='1000'>
              <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='18250' id='8' name='Confirmed Cases Forecasting' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='15750' id='11' name='Performance - CC' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' w='16000' x='83200' y='19250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='22' w='100000' x='0' y='0'>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='21' param='vert' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Confirmed Cases Forecasting' w='53200' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='18250' id='8' name='Confirmed Cases Forecasting' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='10' is-fixed='true' name='Performance - CC' w='29200' x='54000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='15750' id='11' name='Performance - CC' pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' w='16000' x='83200' y='19250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='Fatalities Forecasting' w='53200' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='12' is-fixed='true' name='Performance - F' w='29200' x='54000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{0A92051C-2393-402B-BFDC-6AEC183AD74C}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Confirmed Cases Input'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Fatalities Input'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Regions of World'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{C5E4F948-D11E-4A36-9494-F25A17AD5936}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Confirmed Cases Forecasting'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Fatalities Forecasting'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Performance - CC'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Performance - F'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{1C06817C-85A6-40E0-B141-2AC45DC0477F}' />
    </window>
    <window class='worksheet' name='Fatalities Forecasting'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AA1037F3-1302-4863-99F8-166FCD0B3659}' />
    </window>
    <window class='worksheet' name='Confirmed Cases Forecasting'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5E66CF1B-BD88-43CF-B70A-5678513F9D18}' />
    </window>
    <window class='worksheet' name='Regions of World'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:ConfirmedCases:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:Fatalities:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[max:Fatalities:qk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Country_Province:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{1A348744-A0D0-4335-A907-862C711FCEE9}' />
    </window>
    <window class='worksheet' name='Confirmed Cases Input'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8994F3BE-FAC3-49EB-9F04-E45BB8434B78}' />
    </window>
    <window class='worksheet' name='Fatalities Input'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Type:nk]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F98F9BBD-1FD1-4087-8261-7EF6DDFDA396}' />
    </window>
    <window class='worksheet' name='Performance - CC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.066in9g1e8wm4f17eihpb11b5uvc].[Multiple Values]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FE4CD1B5-ECC7-4854-9DDE-AB3B897D39AB}' />
    </window>
    <window class='worksheet' name='Performance - F'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[:Measure Names]</field>
            <field>[federated.066in9g1e8wm4f17eihpb11b5uvc].[none:Region (F!MAPE):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{01A2E882-E23F-4D5A-B042-4BFAF8ADA3EA}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Confirmed Cases Forecasting' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Confirmed Cases Input' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      gRkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Fatalities Forecasting' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Fatalities Input' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Performance - CC' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Performance - F' width='192'>
      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
      v+Z/AdKCRD/R/XuJAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Regions of World' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
